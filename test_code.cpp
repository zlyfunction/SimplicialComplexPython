TEST_CASE("open_star_circle", "[simplicial_complex][star][2D]")
{
    RowVectors3d V;
    RowVectors3l F;
    std::string name = "/circle.obj";
    std::string path;
    path.append(WMTK_DATA_DIR);
    path.append(name);
    igl::read_triangle_mesh(path, V, F);
    tests::DEBUG_TriMesh m;
    m.initialize(F);

    Tuple t;
    std::vector<std::vector<long>> sc_v;
    t = m.tuple_from_id(PV, 855);
    sc_v = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 13);
    CHECK(sc_v[0][0] == 855);
    CHECK(sc_v[1][0] == 849);
    CHECK(sc_v[1][1] == 855);
    CHECK(sc_v[2][0] == 850);
    CHECK(sc_v[2][1] == 855);
    CHECK(sc_v[3][0] == 854);
    CHECK(sc_v[3][1] == 855);
    CHECK(sc_v[4][0] == 855);
    CHECK(sc_v[4][1] == 856);
    CHECK(sc_v[5][0] == 855);
    CHECK(sc_v[5][1] == 861);
    CHECK(sc_v[6][0] == 855);
    CHECK(sc_v[6][1] == 862);
    CHECK(sc_v[7][0] == 849);
    CHECK(sc_v[7][1] == 850);
    CHECK(sc_v[7][2] == 855);
    CHECK(sc_v[8][0] == 849);
    CHECK(sc_v[8][1] == 854);
    CHECK(sc_v[8][2] == 855);
    CHECK(sc_v[9][0] == 850);
    CHECK(sc_v[9][1] == 855);
    CHECK(sc_v[9][2] == 856);
    CHECK(sc_v[10][0] == 854);
    CHECK(sc_v[10][1] == 855);
    CHECK(sc_v[10][2] == 861);
    CHECK(sc_v[11][0] == 855);
    CHECK(sc_v[11][1] == 856);
    CHECK(sc_v[11][2] == 862);
    CHECK(sc_v[12][0] == 855);
    CHECK(sc_v[12][1] == 861);
    CHECK(sc_v[12][2] == 862);

    t = m.tuple_from_id(PV, 2698);
    sc_v = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 13);
    CHECK(sc_v[0][0] == 2698);
    CHECK(sc_v[1][0] == 2682);
    CHECK(sc_v[1][1] == 2698);
    CHECK(sc_v[2][0] == 2683);
    CHECK(sc_v[2][1] == 2698);
    CHECK(sc_v[3][0] == 2697);
    CHECK(sc_v[3][1] == 2698);
    CHECK(sc_v[4][0] == 2698);
    CHECK(sc_v[4][1] == 2699);
    CHECK(sc_v[5][0] == 2698);
    CHECK(sc_v[5][1] == 2713);
    CHECK(sc_v[6][0] == 2698);
    CHECK(sc_v[6][1] == 2714);
    CHECK(sc_v[7][0] == 2682);
    CHECK(sc_v[7][1] == 2683);
    CHECK(sc_v[7][2] == 2698);
    CHECK(sc_v[8][0] == 2682);
    CHECK(sc_v[8][1] == 2697);
    CHECK(sc_v[8][2] == 2698);
    CHECK(sc_v[9][0] == 2683);
    CHECK(sc_v[9][1] == 2698);
    CHECK(sc_v[9][2] == 2699);
    CHECK(sc_v[10][0] == 2697);
    CHECK(sc_v[10][1] == 2698);
    CHECK(sc_v[10][2] == 2713);
    CHECK(sc_v[11][0] == 2698);
    CHECK(sc_v[11][1] == 2699);
    CHECK(sc_v[11][2] == 2714);
    CHECK(sc_v[12][0] == 2698);
    CHECK(sc_v[12][1] == 2713);
    CHECK(sc_v[12][2] == 2714);

    t = m.tuple_from_id(PV, 857);
    sc_v = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 13);
    CHECK(sc_v[0][0] == 857);
    CHECK(sc_v[1][0] == 108);
    CHECK(sc_v[1][1] == 857);
    CHECK(sc_v[2][0] == 109);
    CHECK(sc_v[2][1] == 857);
    CHECK(sc_v[3][0] == 851);
    CHECK(sc_v[3][1] == 857);
    CHECK(sc_v[4][0] == 857);
    CHECK(sc_v[4][1] == 858);
    CHECK(sc_v[5][0] == 857);
    CHECK(sc_v[5][1] == 864);
    CHECK(sc_v[6][0] == 857);
    CHECK(sc_v[6][1] == 865);
    CHECK(sc_v[7][0] == 108);
    CHECK(sc_v[7][1] == 109);
    CHECK(sc_v[7][2] == 857);
    CHECK(sc_v[8][0] == 108);
    CHECK(sc_v[8][1] == 851);
    CHECK(sc_v[8][2] == 857);
    CHECK(sc_v[9][0] == 109);
    CHECK(sc_v[9][1] == 857);
    CHECK(sc_v[9][2] == 864);
    CHECK(sc_v[10][0] == 851);
    CHECK(sc_v[10][1] == 857);
    CHECK(sc_v[10][2] == 858);
    CHECK(sc_v[11][0] == 857);
    CHECK(sc_v[11][1] == 858);
    CHECK(sc_v[11][2] == 865);
    CHECK(sc_v[12][0] == 857);
    CHECK(sc_v[12][1] == 864);
    CHECK(sc_v[12][2] == 865);

    t = m.tuple_from_id(PV, 4602);
    sc_v = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 13);
    CHECK(sc_v[0][0] == 4602);
    CHECK(sc_v[1][0] == 4576);
    CHECK(sc_v[1][1] == 4602);
    CHECK(sc_v[2][0] == 4577);
    CHECK(sc_v[2][1] == 4602);
    CHECK(sc_v[3][0] == 4601);
    CHECK(sc_v[3][1] == 4602);
    CHECK(sc_v[4][0] == 4602);
    CHECK(sc_v[4][1] == 4603);
    CHECK(sc_v[5][0] == 4602);
    CHECK(sc_v[5][1] == 4628);
    CHECK(sc_v[6][0] == 4602);
    CHECK(sc_v[6][1] == 4629);
    CHECK(sc_v[7][0] == 4576);
    CHECK(sc_v[7][1] == 4577);
    CHECK(sc_v[7][2] == 4602);
    CHECK(sc_v[8][0] == 4576);
    CHECK(sc_v[8][1] == 4601);
    CHECK(sc_v[8][2] == 4602);
    CHECK(sc_v[9][0] == 4577);
    CHECK(sc_v[9][1] == 4602);
    CHECK(sc_v[9][2] == 4603);
    CHECK(sc_v[10][0] == 4601);
    CHECK(sc_v[10][1] == 4602);
    CHECK(sc_v[10][2] == 4628);
    CHECK(sc_v[11][0] == 4602);
    CHECK(sc_v[11][1] == 4603);
    CHECK(sc_v[11][2] == 4629);
    CHECK(sc_v[12][0] == 4602);
    CHECK(sc_v[12][1] == 4628);
    CHECK(sc_v[12][2] == 4629);

    t = m.tuple_from_id(PV, 93);
    sc_v = get_sorted_sc(m, SimplicialComplex::open_star(m, Simplex(PV, t)).get_simplex_vector());
    REQUIRE(sc_v.size() == 13);
    CHECK(sc_v[0][0] == 93);
    CHECK(sc_v[1][0] == 92);
    CHECK(sc_v[1][1] == 93);
    CHECK(sc_v[2][0] == 93);
    CHECK(sc_v[2][1] == 94);
    CHECK(sc_v[3][0] == 93);
    CHECK(sc_v[3][1] == 751);
    CHECK(sc_v[4][0] == 93);
    CHECK(sc_v[4][1] == 760);
    CHECK(sc_v[5][0] == 93);
    CHECK(sc_v[5][1] == 1464);
    CHECK(sc_v[6][0] == 93);
    CHECK(sc_v[6][1] == 1472);
    CHECK(sc_v[7][0] == 92);
    CHECK(sc_v[7][1] == 93);
    CHECK(sc_v[7][2] == 760);
    CHECK(sc_v[8][0] == 92);
    CHECK(sc_v[8][1] == 93);
    CHECK(sc_v[8][2] == 1472);
    CHECK(sc_v[9][0] == 93);
    CHECK(sc_v[9][1] == 94);
    CHECK(sc_v[9][2] == 751);
    CHECK(sc_v[10][0] == 93);
    CHECK(sc_v[10][1] == 94);
    CHECK(sc_v[10][2] == 1464);
    CHECK(sc_v[11][0] == 93);
    CHECK(sc_v[11][1] == 751);
    CHECK(sc_v[11][2] == 760);
    CHECK(sc_v[12][0] == 93);
    CHECK(sc_v[12][1] == 1464);
    CHECK(sc_v[12][2] == 1472);

}
